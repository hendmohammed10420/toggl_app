<div id="<%= dom_id task %>">
<div class="card  bg-light mt-5" style="max-width: 30em;">
<div class="card-header"><%= task.name %></div>
<div class="card-body">
<%= task.body %>
   <div class="d-flex justify-content-start mt-5">
         <%= button_to "Start ", "#", method: :put ,class: "btn btn-success me-2", data: { task_id: task.id, initial_time: task.start_time }, remote: true %>
         <%= button_to "Stop ", "#", method: :put ,class: "btn btn-secondary me-2", data: { task_id: task.id }, remote: true, disabled: true %>
         <%= button_to "Delete", "/tasks/#{task.id}", method: :delete, data: { confirm: "Are you sure?" }, class: "btn btn-danger me-2" %>
         <%= button_to "Edit", edit_task_path(task), method: :get,class: "btn btn-primary me-2" %>
  <div >
        <p class="text-muted mb-1 ms-2">  Time elapsed:</p>
        <p class="timer ms-2" data-task-id="<%= task.id %>">  00:00:00</p>
      </div>
  </div>
 
  </div>
 </div>

</div>

<script>
  var currentTimerId = null;
  var timers = {};
  var elapsedTimes = {};

  function stopTimer(taskId) {
    if (!timers[taskId]) {
      return;
    }

    clearInterval(timers[taskId]);
    var startButton = document.querySelector("button.start[data-task-id='" + taskId + "']");
    startButton.disabled = false;
    var stopButton = document.querySelector("button.stop[data-task-id='" + taskId + "']");
    stopButton.disabled = true;

    var elapsedTime = elapsedTimes[taskId];
    var taskEl = document.getElementById("elapsed-time-" + taskId);
    taskEl.textContent = elapsedTime;

    var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");
    var url = "/tasks/" + taskId;

    fetch(url, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": csrfToken
      },
      body: JSON.stringify({ task: { time_elapsed: elapsedTime } })
    })
    .then(function(response) {
      if (response.ok) {
        console.log("Time elapsed updated successfully!");
      } else {
        console.error("Failed to update time elapsed.");
      }
    })
    .catch(function(error) {
      console.error("Failed to update time elapsed:", error);
    });

    currentTimerId = null;
  }

  document.querySelectorAll(".start").forEach(function(startButton) {
    var taskId = startButton.dataset.taskId;
    var initialTime = startButton.dataset.initialTime;

    startButton.addEventListener("click", function() {
      if (currentTimerId) {
        stopTimer(currentTimerId);
      }

      elapsedTimes[taskId] = parseInt(document.getElementById("elapsed-time-" + taskId).textContent || initialTime);
      timers[taskId] = setInterval(function() {
        elapsedTimes[taskId]++;
        document.getElementById("elapsed-time-" + taskId).textContent = elapsedTimes[taskId];

        // Enable the "Stop Timer" button if the counter is working
        var stopButton = document.querySelector("button.stop-timer[data-task-id='" + taskId + "']");
        stopButton.disabled = false;
      }, 1000);
 startButton.disabled = true;
      currentTimerId = taskId;
    });

    var stopButton = startButton.nextElementSibling;
    stopButton.addEventListener("click", function() {
      stopTimer(taskId);
    });
  });
</script>